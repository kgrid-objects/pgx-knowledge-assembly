from cpic_phenotype_cyp2d6 import phenotype


def test_phenotype_Poor_Metabolizer():
    genotypes = [
        "*3/*3",
        "*3/*3xN",
        "*3/*4",
        "*3/*4xN",
        "*3/*5",
        "*3/*6",
        "*3/*6xN",
        "*3/*7",
        "*3/*8",
        "*3/*11",
        "*3/*12",
        "*3/*13",
        "*3/*14A",
        "*3/*15",
        "*3/*18",
        "*3/*19",
        "*3/*20",
        "*3/*21",
        "*3/*31",
        "*3/*36",
        "*3/*36xN",
        "*3/*38",
        "*3/*40",
        "*3/*42",
        "*3/*44",
        "*3/*47",
        "*3/*51",
        "*3/*56",
        "*3/*57",
        "*3/*60",
        "*3/*62",
        "*3/*68",
        "*3/*69",
        "*3/*92",
        "*3/*96",
        "*3/*99",
        "*3/*100",
        "*3/*101",
        "*3xN/*3xN",
        "*3xN/*4",
        "*3xN/*4xN",
        "*3xN/*5",
        "*3xN/*6",
        "*3xN/*6xN",
        "*3xN/*7",
        "*3xN/*8",
        "*3xN/*11",
        "*3xN/*12",
        "*3xN/*13",
        "*3xN/*14A",
        "*3xN/*15",
        "*3xN/*18",
        "*3xN/*19",
        "*3xN/*20",
        "*3xN/*21",
        "*3xN/*31",
        "*3xN/*36",
        "*3xN/*36xN",
        "*3xN/*38",
        "*3xN/*40",
        "*3xN/*42",
        "*3xN/*44",
        "*3xN/*47",
        "*3xN/*51",
        "*3xN/*56",
        "*3xN/*57",
        "*3xN/*60",
        "*3xN/*62",
        "*3xN/*68",
        "*3xN/*69",
        "*3xN/*92",
        "*3xN/*96",
        "*3xN/*99",
        "*3xN/*100",
        "*3xN/*101",
        "*4/*4",
        "*4/*4xN",
        "*4/*5",
        "*4/*6",
        "*4/*6xN",
        "*4/*7",
        "*4/*8",
        "*4/*11",
        "*4/*12",
        "*4/*13",
        "*4/*14A",
        "*4/*15",
        "*4/*18",
        "*4/*19",
        "*4/*20",
        "*4/*21",
        "*4/*31",
        "*4/*36",
        "*4/*36xN",
        "*4/*38",
        "*4/*40",
        "*4/*42",
        "*4/*44",
        "*4/*47",
        "*4/*51",
        "*4/*56",
        "*4/*57",
        "*4/*60",
        "*4/*62",
        "*4/*68",
        "*4/*69",
        "*4/*92",
        "*4/*96",
        "*4/*99",
        "*4/*100",
        "*4/*101",
        "*4xN/*4xN",
        "*4xN/*5",
        "*4xN/*6",
        "*4xN/*6xN",
        "*4xN/*7",
        "*4xN/*8",
        "*4xN/*11",
        "*4xN/*12",
        "*4xN/*13",
        "*4xN/*14A",
        "*4xN/*15",
        "*4xN/*18",
        "*4xN/*19",
        "*4xN/*20",
        "*4xN/*21",
        "*4xN/*31",
        "*4xN/*36",
        "*4xN/*36xN",
        "*4xN/*38",
        "*4xN/*40",
        "*4xN/*42",
        "*4xN/*44",
        "*4xN/*47",
        "*4xN/*51",
        "*4xN/*56",
        "*4xN/*57",
        "*4xN/*60",
        "*4xN/*62",
        "*4xN/*68",
        "*4xN/*69",
        "*4xN/*92",
        "*4xN/*96",
        "*4xN/*99",
        "*4xN/*100",
        "*4xN/*101",
        "*5/*5",
        "*5/*6",
        "*5/*6xN",
        "*5/*7",
        "*5/*8",
        "*5/*11",
        "*5/*12",
        "*5/*13",
        "*5/*14A",
        "*5/*15",
        "*5/*18",
        "*5/*19",
        "*5/*20",
        "*5/*21",
        "*5/*31",
        "*5/*36",
        "*5/*36xN",
        "*5/*38",
        "*5/*40",
        "*5/*42",
        "*5/*44",
        "*5/*47",
        "*5/*51",
        "*5/*56",
        "*5/*57",
        "*5/*60",
        "*5/*62",
        "*5/*68",
        "*5/*69",
        "*5/*92",
        "*5/*96",
        "*5/*99",
        "*5/*100",
        "*5/*101",
        "*6/*6",
        "*6/*6xN",
        "*6/*7",
        "*6/*8",
        "*6/*11",
        "*6/*12",
        "*6/*13",
        "*6/*14A",
        "*6/*15",
        "*6/*18",
        "*6/*19",
        "*6/*20",
        "*6/*21",
        "*6/*31",
        "*6/*36",
        "*6/*36xN",
        "*6/*38",
        "*6/*40",
        "*6/*42",
        "*6/*44",
        "*6/*47",
        "*6/*51",
        "*6/*56",
        "*6/*57",
        "*6/*60",
        "*6/*62",
        "*6/*68",
        "*6/*69",
        "*6/*92",
        "*6/*96",
        "*6/*99",
        "*6/*100",
        "*6/*101",
        "*6xN/*6xN",
        "*6xN/*7",
        "*6xN/*8",
        "*6xN/*11",
        "*6xN/*12",
        "*6xN/*13",
        "*6xN/*14A",
        "*6xN/*15",
        "*6xN/*18",
        "*6xN/*19",
        "*6xN/*20",
        "*6xN/*21",
        "*6xN/*31",
        "*6xN/*36",
        "*6xN/*36xN",
        "*6xN/*38",
        "*6xN/*40",
        "*6xN/*42",
        "*6xN/*44",
        "*6xN/*47",
        "*6xN/*51",
        "*6xN/*56",
        "*6xN/*57",
        "*6xN/*60",
        "*6xN/*62",
        "*6xN/*68",
        "*6xN/*69",
        "*6xN/*92",
        "*6xN/*96",
        "*6xN/*99",
        "*6xN/*100",
        "*6xN/*101",
        "*7/*7",
        "*7/*8",
        "*7/*11",
        "*7/*12",
        "*7/*13",
        "*7/*14A",
        "*7/*15",
        "*7/*18",
        "*7/*19",
        "*7/*20",
        "*7/*21",
        "*7/*31",
        "*7/*36",
        "*7/*36xN",
        "*7/*38",
        "*7/*40",
        "*7/*42",
        "*7/*44",
        "*7/*47",
        "*7/*51",
        "*7/*56",
        "*7/*57",
        "*7/*60",
        "*7/*62",
        "*7/*68",
        "*7/*69",
        "*7/*92",
        "*7/*96",
        "*7/*99",
        "*7/*100",
        "*7/*101",
        "*8/*8",
        "*8/*11",
        "*8/*12",
        "*8/*13",
        "*8/*14A",
        "*8/*15",
        "*8/*18",
        "*8/*19",
        "*8/*20",
        "*8/*21",
        "*8/*31",
        "*8/*36",
        "*8/*36xN",
        "*8/*38",
        "*8/*40",
        "*8/*42",
        "*8/*44",
        "*8/*47",
        "*8/*51",
        "*8/*56",
        "*8/*57",
        "*8/*60",
        "*8/*62",
        "*8/*68",
        "*8/*69",
        "*8/*92",
        "*8/*96",
        "*8/*99",
        "*8/*100",
        "*8/*101",
        "*11/*11",
        "*11/*12",
        "*11/*13",
        "*11/*14A",
        "*11/*15",
        "*11/*18",
        "*11/*19",
        "*11/*20",
        "*11/*21",
        "*11/*31",
        "*11/*36",
        "*11/*36xN",
        "*11/*38",
        "*11/*40",
        "*11/*42",
        "*11/*44",
        "*11/*47",
        "*11/*51",
        "*11/*56",
        "*11/*57",
        "*11/*60",
        "*11/*62",
        "*11/*68",
        "*11/*69",
        "*11/*92",
        "*11/*96",
        "*11/*99",
        "*11/*100",
        "*11/*101",
        "*12/*12",
        "*12/*13",
        "*12/*14A",
        "*12/*15",
        "*12/*18",
        "*12/*19",
        "*12/*20",
        "*12/*21",
        "*12/*31",
        "*12/*36",
        "*12/*36xN",
        "*12/*38",
        "*12/*40",
        "*12/*42",
        "*12/*44",
        "*12/*47",
        "*12/*51",
        "*12/*56",
        "*12/*57",
        "*12/*60",
        "*12/*62",
        "*12/*68",
        "*12/*69",
        "*12/*92",
        "*12/*96",
        "*12/*99",
        "*12/*100",
        "*12/*101",
        "*13/*13",
        "*13/*14A",
        "*13/*15",
        "*13/*18",
        "*13/*19",
        "*13/*20",
        "*13/*21",
        "*13/*31",
        "*13/*36",
        "*13/*36xN",
        "*13/*38",
        "*13/*40",
        "*13/*42",
        "*13/*44",
        "*13/*47",
        "*13/*51",
        "*13/*56",
        "*13/*57",
        "*13/*60",
        "*13/*62",
        "*13/*68",
        "*13/*69",
        "*13/*92",
        "*13/*96",
        "*13/*99",
        "*13/*100",
        "*13/*101",
        "*14A/*14A",
        "*14A/*15",
        "*14A/*18",
        "*14A/*19",
        "*14A/*20",
        "*14A/*21",
        "*14A/*31",
        "*14A/*36",
        "*14A/*36xN",
        "*14A/*38",
        "*14A/*40",
        "*14A/*42",
        "*14A/*44",
        "*14A/*47",
        "*14A/*51",
        "*14A/*56",
        "*14A/*57",
        "*14A/*60",
        "*14A/*62",
        "*14A/*68",
        "*14A/*69",
        "*14A/*92",
        "*14A/*96",
        "*14A/*99",
        "*14A/*100",
        "*14A/*101",
        "*15/*15",
        "*15/*18",
        "*15/*19",
        "*15/*20",
        "*15/*21",
        "*15/*31",
        "*15/*36",
        "*15/*36xN",
        "*15/*38",
        "*15/*40",
        "*15/*42",
        "*15/*44",
        "*15/*47",
        "*15/*51",
        "*15/*56",
        "*15/*57",
        "*15/*60",
        "*15/*62",
        "*15/*68",
        "*15/*69",
        "*15/*92",
        "*15/*96",
        "*15/*99",
        "*15/*100",
        "*15/*101",
        "*18/*18",
        "*18/*19",
        "*18/*20",
        "*18/*21",
        "*18/*31",
        "*18/*36",
        "*18/*36xN",
        "*18/*38",
        "*18/*40",
        "*18/*42",
        "*18/*44",
        "*18/*47",
        "*18/*51",
        "*18/*56",
        "*18/*57",
        "*18/*60",
        "*18/*62",
        "*18/*68",
        "*18/*69",
        "*18/*92",
        "*18/*96",
        "*18/*99",
        "*18/*100",
        "*18/*101",
        "*19/*19",
        "*19/*20",
        "*19/*21",
        "*19/*31",
        "*19/*36",
        "*19/*36xN",
        "*19/*38",
        "*19/*40",
        "*19/*42",
        "*19/*44",
        "*19/*47",
        "*19/*51",
        "*19/*56",
        "*19/*57",
        "*19/*60",
        "*19/*62",
        "*19/*68",
        "*19/*69",
        "*19/*92",
        "*19/*96",
        "*19/*99",
        "*19/*100",
        "*19/*101",
        "*20/*20",
        "*20/*21",
        "*20/*31",
        "*20/*36",
        "*20/*36xN",
        "*20/*38",
        "*20/*40",
        "*20/*42",
        "*20/*44",
        "*20/*47",
        "*20/*51",
        "*20/*56",
        "*20/*57",
        "*20/*60",
        "*20/*62",
        "*20/*68",
        "*20/*69",
        "*20/*92",
        "*20/*96",
        "*20/*99",
        "*20/*100",
        "*20/*101",
        "*21/*21",
        "*21/*31",
        "*21/*36",
        "*21/*36xN",
        "*21/*38",
        "*21/*40",
        "*21/*42",
        "*21/*44",
        "*21/*47",
        "*21/*51",
        "*21/*56",
        "*21/*57",
        "*21/*60",
        "*21/*62",
        "*21/*68",
        "*21/*69",
        "*21/*92",
        "*21/*96",
        "*21/*99",
        "*21/*100",
        "*21/*101",
        "*31/*31",
        "*31/*36",
        "*31/*36xN",
        "*31/*38",
        "*31/*40",
        "*31/*42",
        "*31/*44",
        "*31/*47",
        "*31/*51",
        "*31/*56",
        "*31/*57",
        "*31/*60",
        "*31/*62",
        "*31/*68",
        "*31/*69",
        "*31/*92",
        "*31/*96",
        "*31/*99",
        "*31/*100",
        "*31/*101",
        "*36/*36",
        "*36/*36xN",
        "*36/*38",
        "*36/*40",
        "*36/*42",
        "*36/*44",
        "*36/*47",
        "*36/*51",
        "*36/*56",
        "*36/*57",
        "*36/*60",
        "*36/*62",
        "*36/*68",
        "*36/*69",
        "*36/*92",
        "*36/*96",
        "*36/*99",
        "*36/*100",
        "*36/*101",
        "*36xN/*36xN",
        "*36xN/*38",
        "*36xN/*40",
        "*36xN/*42",
        "*36xN/*44",
        "*36xN/*47",
        "*36xN/*51",
        "*36xN/*56",
        "*36xN/*57",
        "*36xN/*60",
        "*36xN/*62",
        "*36xN/*68",
        "*36xN/*69",
        "*36xN/*92",
        "*36xN/*96",
        "*36xN/*99",
        "*36xN/*100",
        "*36xN/*101",
        "*38/*38",
        "*38/*40",
        "*38/*42",
        "*38/*44",
        "*38/*47",
        "*38/*51",
        "*38/*56",
        "*38/*57",
        "*38/*60",
        "*38/*62",
        "*38/*68",
        "*38/*69",
        "*38/*92",
        "*38/*96",
        "*38/*99",
        "*38/*100",
        "*38/*101",
        "*40/*40",
        "*40/*42",
        "*40/*44",
        "*40/*47",
        "*40/*51",
        "*40/*56",
        "*40/*57",
        "*40/*60",
        "*40/*62",
        "*40/*68",
        "*40/*69",
        "*40/*92",
        "*40/*96",
        "*40/*99",
        "*40/*100",
        "*40/*101",
        "*42/*42",
        "*42/*44",
        "*42/*47",
        "*42/*51",
        "*42/*56",
        "*42/*57",
        "*42/*60",
        "*42/*62",
        "*42/*68",
        "*42/*69",
        "*42/*92",
        "*42/*96",
        "*42/*99",
        "*42/*100",
        "*42/*101",
        "*44/*44",
        "*44/*47",
        "*44/*51",
        "*44/*56",
        "*44/*57",
        "*44/*60",
        "*44/*62",
        "*44/*68",
        "*44/*69",
        "*44/*92",
        "*44/*96",
        "*44/*99",
        "*44/*100",
        "*44/*101",
        "*47/*47",
        "*47/*51",
        "*47/*56",
        "*47/*57",
        "*47/*60",
        "*47/*62",
        "*47/*68",
        "*47/*69",
        "*47/*92",
        "*47/*96",
        "*47/*99",
        "*47/*100",
        "*47/*101",
        "*51/*51",
        "*51/*56",
        "*51/*57",
        "*51/*60",
        "*51/*62",
        "*51/*68",
        "*51/*69",
        "*51/*92",
        "*51/*96",
        "*51/*99",
        "*51/*100",
        "*51/*101",
        "*56/*56",
        "*56/*57",
        "*56/*60",
        "*56/*62",
        "*56/*68",
        "*56/*69",
        "*56/*92",
        "*56/*96",
        "*56/*99",
        "*56/*100",
        "*56/*101",
        "*57/*57",
        "*57/*60",
        "*57/*62",
        "*57/*68",
        "*57/*69",
        "*57/*92",
        "*57/*96",
        "*57/*99",
        "*57/*100",
        "*57/*101",
        "*60/*60",
        "*60/*62",
        "*60/*68",
        "*60/*69",
        "*60/*92",
        "*60/*96",
        "*60/*99",
        "*60/*100",
        "*60/*101",
        "*62/*62",
        "*62/*68",
        "*62/*69",
        "*62/*92",
        "*62/*96",
        "*62/*99",
        "*62/*100",
        "*62/*101",
        "*68/*68",
        "*68/*69",
        "*68/*92",
        "*68/*96",
        "*68/*99",
        "*68/*100",
        "*68/*101",
        "*69/*69",
        "*69/*92",
        "*69/*96",
        "*69/*99",
        "*69/*100",
        "*69/*101",
        "*92/*92",
        "*92/*96",
        "*92/*99",
        "*92/*100",
        "*92/*101",
        "*96/*96",
        "*96/*99",
        "*96/*100",
        "*96/*101",
        "*99/*99",
        "*99/*100",
        "*99/*101",
        "*100/*100",
        "*100/*101",
        "*101/*101",
    ]
    for genotype in genotypes:
        result = phenotype({"CYP2D6": genotype})
        assert result["CYP2D6"]["phenotype"] == "Poor metabolizer"

    print("Testing `Poor Metabolizer` phenotypes.")
